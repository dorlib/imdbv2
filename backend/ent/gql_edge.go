// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (d *Director) Movies(ctx context.Context) ([]*Movie, error) {
	result, err := d.Edges.MoviesOrErr()
	if IsNotLoaded(err) {
		result, err = d.QueryMovies().All(ctx)
	}
	return result, err
}

func (m *Movie) Director(ctx context.Context) (*Director, error) {
	result, err := m.Edges.DirectorOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryDirector().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Movie) Review(ctx context.Context) ([]*Review, error) {
	result, err := m.Edges.ReviewOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryReview().All(ctx)
	}
	return result, err
}

func (r *Review) Movies(ctx context.Context) ([]*Movie, error) {
	result, err := r.Edges.MoviesOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryMovies().All(ctx)
	}
	return result, err
}

func (r *Review) User(ctx context.Context) ([]*User, error) {
	result, err := r.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = r.QueryUser().All(ctx)
	}
	return result, err
}

func (u *User) Reviews(ctx context.Context) ([]*Review, error) {
	result, err := u.Edges.ReviewsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryReviews().All(ctx)
	}
	return result, err
}
