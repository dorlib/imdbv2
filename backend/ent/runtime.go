// Code generated by entc, DO NOT EDIT.

package ent

import (
	"imdbv2/ent/schema"
	"imdbv2/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescFirstname is the schema descriptor for firstname field.
	userDescFirstname := userFields[0].Descriptor()
	// user.FirstnameValidator is a validator for the "firstname" field. It is called by the builders before save.
	user.FirstnameValidator = userDescFirstname.Validators[0].(func(string) error)
	// userDescLastname is the schema descriptor for lastname field.
	userDescLastname := userFields[1].Descriptor()
	// user.LastnameValidator is a validator for the "lastname" field. It is called by the builders before save.
	user.LastnameValidator = userDescLastname.Validators[0].(func(string) error)
	// userDescNickname is the schema descriptor for nickname field.
	userDescNickname := userFields[2].Descriptor()
	// user.NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	user.NicknameValidator = userDescNickname.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[4].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = func() func(string) error {
		validators := userDescPassword.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password string) error {
			for _, fn := range fns {
				if err := fn(password); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
